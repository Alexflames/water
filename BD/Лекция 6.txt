Протокол преднамеренных блокировок

На строку вешается X-блокировка, затем на табличку другая, на файл еще одна,
и на базу данных последняя

IS - блокировка с возможностью взаимного доступа (Я прочитаю какую-то строчку)
IX - блокировка без взаимного доступа (Я изменю какую-то строчку)
Эти блокировки вешаются и на содержащие объекты рекурсивно

SIX - блокировка как с возможностью взаимного доступа, так и без него
(Сначала прочитаю все, потом изменю что-то)

X, S блокировки действуют на всю таблицу

Также используют предикатную блокировку (теоретически)

Метод временных меток. Если транзакция началась раньше, то у неё и права

Блокировки не описываются явно, они заложены в СУБД

Механизм выделения версий данных

Теорема Эсварана - двухфазные блокировки
1) Нарастание
2) Снятие блокировок
Всё окк

4 уровня изоляции - 
o SERIALIZABLE - самый сильный - не возникают нарушения
o REPEATABLE READ - фантомы
o READ COMMITED - неповторяемое считывание, фантомы
o READ UNCOMMITED - неповторяемое, неаккуратное считывание, фантомы

Восстановление данных
Буфер памяти - когда свободное время данные сбрасываются на жесткий диск
Хранить нужно что сделали и что получили

Виды восстановления данных
о Индивидуальный откат транзакции - все легко
о Мягкий сбой - утрата оперативной памяти
о Жесткий сбой - памяти на жестком диске

Страницы БД, содержимое которых в буфере отличается от того на жестком диске
называются грязными "dirty"

1) Write Ahead Log (WAL) - "пиши сначала в журнал"
Если мы что-то делаем с данными - выгружаем намерения в память, а
затем уже делаем это

2) Каждая успешно завершившаяся транзакция долдеа быть зафиксирована в памяти

3) Ограниченность памяти

Контрольные точки.
Как восстанавливать? (В следующий раз)
Ну там UNDO, REDO, в зависимости от того, зашла ли (полностью/частично/никак) транзакция
в бэкап.

Для восстановления надо бы иметь 
копию БД, копию журнала транзакций, журнал транзакций - да еще и на отдельном диске

Модель восстановления является сбойством БД, которое задает, как выполняется 
управление журналом транзакций

Различают:
о Простую модель восстановления - нет резервных копий журналов
о Модель полного восстановления - резервные копии журналов. Если журнал не
поврежден, то восстановление до места сбоя. Если журнал поврежден, то 
восстановление до конца резервной копии журнала
о Модель неполного протоколирования
(Например, при копировании с одного места 2 Гб данных было временно отключено,
так как можно заново загрузить их)

Резервные копии (вся БД, часть БД, набор файлов):
о Полное резервное копирование
о Разностное копирование (От слова разность)
о Разностное копирование с накоплением - каждая следующая копия 
проверяется предыдущей - (чаще всего используют эту)

Репликация - копирование и перенос данных и объектов баз данных из одной БД в
другую с последующей синхронизации.

Модель публикации репликации
  Publisher (Издатель) - сервер или БД, которая посылает данные неа другой сервер
  или на другую БД
  Subscriber (Подпищик) - сервер или БД, которая получает данные от другого
  сервера или другой БД
  Distributor (Распространитель) - сервер, управляющий потоком данных через
  систему репликации. У этого сервера специализированная БД - distribution db