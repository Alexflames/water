Семафоры Дейкстры 19#5 год

Семафор s
Основные операции: проверять и увеличивать (wut?)
P(s) - от слова proberen - 
	если S > 0
		то S = S - 1
	иначе < ожидать S >
V(s) - от слова verhogen - 
	если < один или несколько процессов ожидает s >
		то < снять ожидание у одного из ожидающих процессов >
	иначе S = S + 1

+ операция инициализации семафора

Двоичные семафоры (s = 0 || 1) называются еще мьютексы (mutex)
Общие семафоры (s = N)

Пример с двоичным семафором

Semaphore Mutex = 1;
Process_1() {
	while(1) {
		P(Mutex);
		< Использование общего ресурса >
		V(Mutex);
	}
}

Process_2() {
	while(1) {
		P(Mutex);
		< Использование общего ресурса >
		V(Mutex);
	}
}

^ Режим пассивного ожидания 
Операции P и V выполняются операционной системой в ответ на запрос, выданный процессом, содержащий имя семафора в качестве параметра

(эээ, што это было?...) Задачи производителя потребителя

Пример пула печати, ну, классический пример с печатью доков
Осуществляется с помощью семафора

Решение задачи производителя-потребителя с помощью семафоров

Семафор empty
		full
		mutex

Semaphore mutex = 1;
Semaphore empty = N;
Semaphore full  = 0;

Producer:
	while(1) {
		produce_item;
		P(empty);
		P(mutex);
		put_item;
		V(mutex);
		V(full);
	}

Consumer:
	while(1) {
		P(full);
		P(mutex);
		get_item;
		V(mutex);
		V(empty);
		consume_item;
	}

Мониторы - предложены Хуаром, 1974
Более высокоуровневый механизм синхронизации по сравнению с семафорами
Похожи на классы в ООП
Процедуры находятся во взаимном исключении

Монитор - набор разделяемых переменных и повторно входимых процедур доступа к ним, к которым процессор пользуется в режиме исключения, им в каждый момент времени может пользоваться только 1 процесс

Monitor <Name> {
	< объявление переменных >
	< операторы синхронизации >
	< процедуры монитора >
}

Когда запущена какая-либо процедура, другие блокируются
Св-ва:
1. Переменные монитора могут обрабатываться только процедурами монитора
2. Для организации приостановки работ процедур монитора до выполнения определенных логических условий вводят понятие условных переменных (condition variables - cv), над которыми можно осуществлять 2 операции - wait и signal
wait(cv) - операция блокировки с ожиданием наступления события
signal(cv) - операция для объявления наступления события

Мониторы Хара - пробужденный процесс подавляет выполнение пробудившего процесса

Monitor ProducerConsumer {
	condition full, empty;
	int count;

	void put() {
		if (count == N) full.wait();
		put_item;
		count += 1;
		if (count == 1) empty.signal();
	}

	void get() {
		if (count == 0) empty.wait();
		get_item();
		count -= 1;
		if (count == N - 1) full.signal;
	}

	{ count = 0; }
}

Producer:
	while(1) {
		produce_item;
		ProducerConsumer.put();
	}

Consumer:
	while(1) {
		ProducerConsumer.get();
		consume_item;
	}

C использованием механизмов условных переменных можно реализовать семафор при помощи монитора
Monitor Semaphore {
	int s = 1;
	condition cv;
	void Psem() {
		while (s == 0) cv.wait();
		s = s - 1;
	}

	void Vsem() {
		s = s + 1
		cv.signal();
	}
}

Реализация монитора с помощью семафора
(Сделать на листочке, сдать на лекции, дз на бонусы)