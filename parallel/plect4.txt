Процесс - некоторая последовательность команд, претендующая с некоторыми другими процессами программы на использование процессора для своего выполнения.
~~ thread ~~
Тау - время начала выполнения процесса
tp - траектория развития процесса
pn(i1, i2, ..., in)
t(pn) = tp = (Тау1, Тау2, ..., ТауN) ТауJ, 1 <= j <= i_j
Для любого i, 1 <= i < n => Тау_i+1 >= Тау_i + 1
Тау_i+1 = Тау_i + 1  -- активный процесс
Тау_i+1 > Тау_i + 1  -- приостановлен


        Выполнение
        ^      |
        |      |
        v      v
  Ожидание <-- Блокировка

Категория ресурсов - 
o По характеру использования
  1. Выделяемые - монопольные ресурсы, выделяются и освобождаются когда процесс отказывается от них
  Например, память для хранения содержимого регистров
  2. Повторно распределяемые - по ходу выполнения выделяемые и освобождаемые (оперативная память)
  3. Разделяемые - динамически используемые
  4. Реитерабельные

..........
Проблема одновременного использования разделяемых ресурсов

Процесс 1       Процесс 2
N = N + 1       N = N + 1
печать N        печать N

Время   Процесс 1         Процесс 2
  1      Чтение N(1) 
  2                       Чтение N(1)
  3                       Прибавление 1(2)
  4     Прибавление 1(2)
  5      Запись N(2)
  6      Печать N(2)
  7                        Запись N(2)
  8                        Печать N(2)

  Зависит от скоростей, называется "гонка" (race condition)
  Происходит если не предпринять специальные меры


Требования, предъявляемые к алгоритмам при разработке параллельных программ
1. Моменты выполнения командных последовательностей разных процессов могут чередоваться по времени
2. Между моментами исполнения команд разных процессов могут выполняться разные временные соотношения
3. Условие взаимоисключения (Mutual exclusion)
4. Условие прогресса (usloviya progressa)
5. Условие ограниченного ожидания (Bound waiting)


Командная последовательность потоков, в ходе которой поток (или процесс) использует ресурс на условиях
взаимного исключения, называется критической секцией.

Решение проблемы взаимоисключения
Вариант 1.
Используем управляющую переменную для задания номера процесса, имеющего право на разделяемый ресурс.
int ProcessNum = 1
Process_1() {
  while(1) {
    while(ProcessNum==2);
    <Использование общего ресурса>
    ProcessNum=2;
  }
}

Process_2() {
  while(1) {
    while(ProcessNum==1);
    <Использование общего ресурса>
    ProcessNum=1;
  }
}

Вариант 2.
Жесткая синхронизация, 2 управляющие переменные задают критическую секцию

int ResourceProc1 = 0; // 1 - ресурс занят процессом 1
int ResourceProc2 = 0; // занят процессом 2
Process_1() {
  while(1) {
    while(ResourceProc2==1);
    RecouceProc1 = 1;
    <Использование общего ресурса>
    ResourceProc1 = 0;
  }
}

МОЖЕТ БЫТЬ ПЛОХО КОГДА ОБА ВОШЛИ В ЦИКЛ ОДНОВРЕМЕННО

Process_2() {
  while(1) {
    while(ResourceProc1==1);
    RecouceProc2 = 1;
    <Использование общего ресурса>
    RecouceProc2 = 0;
  }
}

Вариант 3.
Установка значений перед циклом процесса занятости

int ResourceProc1 = 0; // 1 - ресурс занят процессом 1
int ResourceProc2 = 0; // занят процессом 2
Process_1() {
  while(1) {
    RecouceProc1 = 1;
    while(ResourceProc2==1);
    <Использование общего ресурса>
    ResourceProc1 = 0;
  }
}

Process_2() {
  while(1) {
    RecouceProc2 = 1;
    while(ResourceProc1==1);    
    <Использование общего ресурса>
    RecouceProc2 = 0;
  }
}

МОЖЕТ БЫТЬ ПЛОХО КОГДА ОБА СТАВЯТ ЕДИНИЦЫ

Вариант 4.

int ResourceProc1 = 0; // 1 - ресурс занят процессом 1
int ResourceProc2 = 0; // занят процессом 2
Process_1() {
  while(1) {
    RecouceProc1 = 1;
    while(ResourceProc2==1) {
      RecouceProc1 = 0;
      <Временная задержка>
      ResourceProc1 = 1;
    }
    <Использование общего ресурса>
    ResourceProc1=0;
  }
}

Process_2() {
  while(1) {
    RecouceProc2 = 1;
    while(ResourceProc1==1) {
      RecouceProc2 = 0;
      <Временная задержка>
      ResourceProc2 = 1;
    }
    <Использование общего ресурса>
    ResourceProc2=0;
  }
}

Может быть бесконечная задержка


Алгоритм Деккера - л у ч ш е е
Напишем для 2 процессов (булочный)

int ProcessNum = 1 // № процесса для доступа к ресурсу
int ResourceProc1 = 0
int ResourceProc2 = 0
Process_1() {
  ResourceProc1 = 1
  while(ResourceProc2 == 1) 
  {
    ResourceProc1 = 0;
    while (ProcessNum == 2);
    ResourceProc1 = 1;
  }
  <Использование общего ресурса>
  ProcessNum = 2;
  ResourceProc1 = 0;
}

Process_2() {
  ResourceProc2 = 1
  while(ResourceProc1 == 1) 
  {
    ResourceProc2 = 0;
    while (ProcessNum == 1);
    ResourceProc2 = 1;
  }
  <Использование общего ресурса>
  ProcessNum = 1;
  ResourceProc2 = 0;
}