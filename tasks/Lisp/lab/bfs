bfs

(defun bfs (l &optional (depth 1) curl (cnt 0))
  (cond
    ((and (null l) (= cnt 0) depth))
    ((null l) (bfs curl (1+ depth)))
    ((listp (car l)) 
      (bfs (cdr l) depth (append curl (car l) (1+ cnt))))
    (T (bfs (cdr l) depth curl cnt))))

(defun dfs (l &optional (depth 1))
  (cond 
    ((null l) depth)
    ((listp (car l)) (let ((nd (dfs (car l))))
                       (dfs (cdr l) (max nd depth))))
    (T (dfs (cdr l) depth)))) 


(defun find-list-part (seq 
                       l 
                       &optional (cur-depth 1) 
                       (tempseq '()) 
                       (ans '())
                       (i '(1)))
  (cond
    ((null l)
      (if (= cur-depth 1) ans i))
    ((listp el)
      (let* ((el (car l))
             (tempseq (append tempseq (list el)))
             (nans (append 
                     (find-list-part seq 
                                     el
                                     (1+ cur-depth))
                     ans)))
        (if (= (length seq) (length tempseq))
            (if (equal seq tempseq)
                (find-list-part seq 
                                (cdr l)
                                (1+ cur-depth) 
                                (cdr tempseq)
                                (cons i nans)
                                (1+ (car i)))
                (find-list-part seq
                                (cdr l)
                                (1+ cur-depth) 
                                (cdr tempseq)
                                nans
                                (1+ (car i))))
            (find-list-part seq
                            (cdr l)
                            (1+ cur-depth) 
                            tempseq
                            nans
                            i))))
    (T (let* ((el (car l))
              (tempseq (append tempseq (list el)))
         (if (= (length seq) (length tempseq))
             (if (equal seq tempseq)
                 (find-list-part seq 
                                 (cdr l)
                                 (1+ cur-depth) 
                                 (cdr tempseq)
                                 (cons i nans)
                                 (1+ (car i)))
                 (find-list-part seq
                                 (cdr l)
                                 (1+ cur-depth) 
                                 (cdr tempseq)
                                 nans
                                 (1+ (car i))))
             (find-list-part seq
                             (cdr l)
                             (1+ cur-depth) 
                             tempseq
                             nans
                             i)))))))

(defun find-list-part (seq 
                       l 
                       &optional (tempseq '()) 
                                 (ans '())
                                 (i 1))
  (cond
    ((null l) ans)
    ((listp (car l))
      (let* ((el (car l))
             (tempseq (append tempseq (list el)))       
             (nans (append 
                     ans 
                     (find-list-part seq 
                                     el
                                     ()
                                     (list i)
                                     1))))
        (if (= (length seq) (length tempseq))
            (if (equal seq tempseq)
                (find-list-part seq 
                                (cdr l)
                                (cdr tempseq)
                                (append ans (list i))
                                (1+ i))
                (find-list-part seq
                                (cdr l)
                                (cdr tempseq)
                                nans
                                (1+ i)))
            (find-list-part seq
                            (cdr l)
                            tempseq
                            nans
                            i))))
    (T (let* ((el (car l))
              (tempseq (append tempseq (list el))))
         (if (= (length seq) (length tempseq))
             (if (equal seq tempseq)
                 (find-list-part seq 
                                 (cdr l)
                                 (cdr tempseq)
                                 (append ans (list i))
                                 (1+ i))
                 (find-list-part seq
                                 (cdr l)
                                 (cdr tempseq)
                                 ans
                                 (1+ i)))
             (find-list-part seq
                             (cdr l)
                             tempseq
                             ans
                             i))))))


(defun find-list-part (seq 
                       l 
                       &optional new-l 
                       (cur-depth 1) 
                       (cnt 0) 
                       (tempseq '()) 
                       (ans '())
                       (i 1))
  (if (null l)          ; если список l стал пустым 
      (if (= cnt 0) ans ; и на текущем уровне не было подсписков, 
                        ; значит вернуть результат
          ; если же подсписки были, то есть еще один уровень, элементы которого
          ; составляют список new-l, от которого рекурсивно запускаем функцию
          (find-list-part seq new-l () (+ cur-depth 1) 0 () ans 1))
      ; если список l пока не пустой, то в нем есть первый элемент, 
      ; обозначим его el
      (let* ((el (car l)) 
            (tempseq (append tempseq (list el))))
        (cond 
          ((= (length seq) (length tempseq))
            (if (equal seq tempseq)
                (if (listp el)
                    (find-list-part seq 
                                    (cdr l)
                                    (append el new-l)
                                    cur-depth 
                                    (+ 1 cnt)
                                    (cdr tempseq)
                                    (cons (list i) ans)
                                    (1+ i))
                    (find-list-part seq
                                    (cdr l)
                                    new-l 
                                    cur-depth 
                                    cnt
                                    (cdr tempseq)
                                    (cons (list i) ans)
                                    (1+ i)))
                (if (listp el)
                    (find-list-part seq 
                                    (cdr l) 
                                    (append el new-l)
                                    cur-depth 
                                    (+ 1 cnt)
                                    (cdr tempseq)
                                    ans
                                    (1+ i))
                    (find-list-part seq 
                                    (cdr l)
                                    new-l 
                                    cur-depth 
                                    cnt
                                    (cdr tempseq)
                                    ans
                                    (1+ i)))))
          ((listp el) ; если el - список, то его элементы добавляем  
            (find-list-part seq 
                            (cdr l)
                            (append el new-l)
                            cur-depth 
                            (+ 1 cnt)
                            tempseq
                            ans
                            i))
          ; в противном случае просто игнорируем элемент el
          (T (find-list-part seq
                             (cdr l)
                             new-l 
                             cur-depth 
                             cnt
                             tempseq
                             ans
                             i))))))


(defun find-list-part (seq 
                       l 
                       &optional (tempseq '()) 
                                 (ans '())
                                 (i '(1)))
  (cond
    ((null l) ans)
    ((listp (car l))
      (let* ((el (car l))
             (tempseq (append tempseq (list el)))       
             (nans (reverse (apply 'append 
                                    (find-list-part seq 
                                                    el)
                                    ans))))
        (if (= (length seq) (length tempseq))
            (if (equal seq tempseq)
                (find-list-part seq 
                                (cdr l)
                                (cdr tempseq)
                                (append ans (list i))
                                (cons (1+ (car i)) (cdr i)))
                (find-list-part seq
                                (cdr l)
                                (cdr tempseq)
                                nans
                                (cons (1+ (car i)) (cdr i))))
            (find-list-part seq
                            (cdr l)
                            tempseq
                            nans
                            i))))
    (T (let* ((el (car l))
              (tempseq (append tempseq (list el))))
         (if (= (length seq) (length tempseq))
             (if (equal seq tempseq)
                 (find-list-part seq 
                                 (cdr l)
                                 (cdr tempseq)
                                 (append ans (list i))
                                 (cons (1+ (car i)) (cdr i)))
                 (find-list-part seq
                                 (cdr l)
                                 (cdr tempseq)
                                 ans
                                 (cons (1+ (car i)) (cdr i))))
             (find-list-part seq
                             (cdr l)
                             tempseq
                             ans
                             i))))))


(defun find-list-part (seq 
                       l 
                       &optional (tempseq '()) 
                                 (ans '())
                                 (i '(1)))
  (cond
    ((null l) ans)
    ((listp (car l))
      (let* ((el (car l))
             (tempseq (append tempseq (list el)))
             (nans  
               (append ans (find-list-part seq 
                                       el
                                       ()
                                       ()
                                       (append '(1) i)))))
        (if (= (length seq) (length tempseq))
            (if (equal seq tempseq)
                (find-list-part seq 
                                (cdr l)
                                (cdr tempseq)
                                (append ans 
                                         (cons (- (+ (car i) 1) (length seq))
                                               (cdr i)))
                                (cons (1+ (car i)) (cdr i)))
                (find-list-part seq
                                (cdr l)
                                (cdr tempseq)
                                nans
                                (cons (1+ (car i)) (cdr i))))
            (find-list-part seq
                            (cdr l)
                            tempseq
                            nans
                            (cons (1+ (car i)) (cdr i))))))
    (T (let* ((el (car l))
              (tempseq (append tempseq (list el))))
         (if (= (length seq) (length tempseq))
             (if (equal seq tempseq)
                 (find-list-part seq 
                                 (cdr l)
                                 (cdr tempseq)
                                 (append ans 
                                         (list (cons (- 
                                                       (+ (car i) 1) 
                                                       (length seq))
                                                     (cdr i))))
                                 (cons (1+ (car i)) (cdr i)))
                 (find-list-part seq
                                 (cdr l)
                                 (cdr tempseq)
                                 ans
                                 (cons (1+ (car i)) (cdr i))))
             (find-list-part seq
                             (cdr l)
                             tempseq
                             ans
                             (cons (1+ (car i)) (cdr i))))))))