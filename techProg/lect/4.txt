----------------------------------------------------------------------
Д/З: Описание
Требования 'языка' / 'нескольких ЯП' к правилам оформленияя программ
----------------------------------------------------------------------
Гибкие методологии:
Scrum (конспект)

Экстремальное программирование - относится к упрощенным методологиям организации 
разработки для небольших и средних команд разработчиков
Цель - создание продукта при неясных и быстро меняющихся требованиях

4 основных принципа:
  1) Итерации (2-3 недели)
  2) Принцип - простота решения - принимается первое простейшее решение проблем,
  усложнение возможно, но в рамках уже других итераций
  3) Интенсивная разработка группами до 10 человек и парное программирование
  4) Обратная связь с заказчиком, он вовлечен в процесс разработки до всех
  возможных тонкостей

Приемы:
  о Игра в планирование - сбор всех известных требований к системе, 
  расставляются по приоритетам, заказчик сообщает о необходимости той или иной
  функциональности, программист оценивает возможность её реализации
  Игра в планирование перед началом каждой итерации
  о Тесное взаимодействие с заказчиком - держите заказчика при себе или
  сами держитесь при заказчике
  о Общесистемные правила наименования
  о Простая архитектура => Рефакторинг
  о Парное программирование 
  о 40-часовая рабочая неделя - не больше!
  о Коллективное владение кодом
  о Небольшие релизы
  о Полное тестирование после каждой итерации

Бережливая разработка - базируется на методах концепции "бережливое производство"
[
  [Бережливое производство] - концепция управления производством предприятия,
  основанное на постоянном стремлении устранения всех видов потерь.
  Автор - Тайики Оно (фирма Тойота), Джеймс Вумэйкер, Дэниэл Джонс
  
  Основная задача - создание процесса непрерывного устранения потерь, т.е. 
  любых действий, которых потребляют ресурсы но не производят ценности.

  Виды потерь:
  1) Из-за перепроизводства 2) Потеря времени из-за ожидания
  3) При ненужной транспортировке 4) Из-за лишних этапов обработки
  5) Из-за лишних запасов 6) Из-за ненужных перемещений
  7) Выпуска дефектной продукции 8) Нереализованный творческий потенциал

  Два источника потерь согласно авторам: 
    1) Перегрузка сотрудников 2) Неравномерное выполнение операций

]
Авторы концепции "бережливая разработка ПО" - Мэри Поппендик, Том Поппендик -
выявили принципы провалов проектов по созданию ПО
1) Часто и неожиданно меняющиеся требования
2) Централизованное принятие решений
3) Жесткое управление объемами работ
4) Традиционный/линейный подход к разработке

Общие типы потерь:
1) Лишняя функциональная возможность
Цитата Джима Джонсона: "только 20% функиональных возможностей в типичном 
пользовательском ПО используются регулярно, около 2/3 редко"
Причина возникновления ненужных функциональных возможностей:
о Слабое понимание заказчиком что необходимо реализовать
о Слабое понимание разработчиком что нужно пользователю
о Конкуренты
о Разработка по каскадной модели (нет связи с разработчиком)
Пути решения: 
> начинать с малого (постараться с начала разработать 20% программного кода), 
который обеспечил бы 80% потребностей заказчика. Всю последующую функциональность
необходимо подтвердить или опровергнуть с широким участием потребителя
> убирать лишнее: если выясняется, что в системе возникнет ненужная функциональность, 
её нужно срочно убрать
> если выясняется, что функционал необходим только 5% пользователей, его необходимо убрать

2) Избыточное проектирование
Когда программист создает код более гибким не имея на это никаких предпосылок
В основе лежит психологическая особенность, связанная с нежеланием переделывать
то что было подготовлено ранее
Чаще всего такая гибкость оказывается несостоятельной и оборачивается ненужной
тратой времени

3) Поиск и исправление ошибок
Трудоёмкость исправлений и затрачиваемое на это время является 
сложнопрогнозируемыми увеличениями
При накоплении ошибок мы накапливаем неопределенность, связанную со временем
завершения проверки.
Необходимо создать условия, при которых бы возникало меньше ошибок и сокращалось
время устранения. Устранять ошибки нужно по мере их обнаружения
Причины появления ошибок:
1) нарушение технологий и принципов написания кода (как правило связано со
спешкой у опытных специалистов)
2) низкая квалификация, низкая культура кодирования

Признаки деструктивной культуры: 
1. Безразличие: "мне за это не платят, главное - сдача работы"
2. Травля в коллективе: злость, сарказм.
3. Ненависть к заказчику и пользователю (выражения типа "сами не знают чего хотят")
4. Ненависть к руководству
5. Ненависть к коллегам
6. Саботаж

Пути решения: развивать квалификацию программистов, следить за мотивацией и духом
команды, командный тренинг, набирать в команду высококвалифицированных спецов, 
новых людей добавлять по одному

Третья причина возникновения ошибок:
  неудачно выбранный инструментарий / платформа 

|=========================|
|Стиль оформления программ|
|=========================|
Д.Ван.Тассел "Помните: программы читаются людьми"

Стиль оформления програм включает: 
1) Правила и наименования объектов программ
2) Правила оформления модулей
3) Стиль оформления текстовых модулей

Правила именования объектов программ:
1. Никакого транслита
2. Принцип использования коротких имен (нежелательно, 
но в некоторых случаях можно и нужно - в локальных модулях)
3. Использование нотаций
3.1 CamelCase
UpperCamelCase
lowerCamelCase
3.2 snake_case
Kebab-case, Train-Case, SCREAMING_CASE

Исследования Момеда Шарифа показали, что информация в змеиной нотации 
воспринимается быстрее чем в верблюжьей 
3.3 Венгерская нотация sName iCount
К именам переменных добавляют символы, определяющие тип или смысл
s sz i p a g
g_iSpeed (глобальная целочисленная переменная, означающая скорость)
i -> int ix      d -> ind dba = b - a
n -> nFound      a -> func(int ax) c -> int
I Венгерскую нотацию рассматривают как стандартную систему сокращений
II В ЯП, где внутреннего механизма типизации не хватает, за счет венгерской
нотации типизацию расширяют
III При изменении типа переменных требуется изменять её имя
VI Имена функций обычно префиксами не снабжают 
V Нотация удобна для написания больших программ в неполнофункциональных редакторах

Л. Торвальдс : "Вписывание типа переменной в её имя ущербно - компилятор
и так знает типы и может их проверить, и это запутывает программиста"

4. Избегать близких по написанию имен
5. Не экономить на длине названия
6. Единый стиль наименования переменных
7. Сокращения опасны