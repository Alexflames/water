ОБЯЗАТЕЛЬНО СДЕЛАТЬ
======================================================================
//Проанализировать и описать стандарт гибкой методологии (один из тех на лекции)\\
======================================================================

Модель жизненного цикла ПО - структра, определяющая последовательность выполнения и взаимосвязи, действий и задач процессов на протяжении жизненного цикла
Модели жизненного цикла устанавливают принципы организации жизненного цикла.
Виды: 1) стандартные модели 2) гибкая методология

1) Big-Bang Model (модель большого взрыва)
Выделяются ресурсы, согласно ресурсам производится процесс работы над ПО
Получаемый результат
Данная модель подходит для учебных и академических проектов.
Особенность данной модели: 
а) Результат может не соотв. требованию заказчиков
б) Не подходит для сложных проектов
в) Плохо реализовано планирование проектов

2) Code & Fix Model
Модель со слабой формализацией, модель черного ящика
Применение: учебные или маленькие несложные проекты
Алгоритм данного проекта:
I) Формируется задание
II) Программист создает первый вариант кода
III) Заказчик оценивает, делает замечания
IV) Программист исправляет, возвращение к (III)
Замечания:
а) Нет затрат времени на проектирование
б) Не определены сроки проекта
в) Ошибки требуют повторного кодирования

3) Каскадная (водопадная/последовательная) модель.
Описана в 70-м году, автор О.У.Ройз
Стадии: планирование->формирование требований->анализ и проектирование->
->конструирование->интеграция и тестирование->поддержка и эксплуатация
Каскадная модель является моделью, выполняющая строго последовательно свои фазы.
Основной принцип - движение только вперед. Следующая фаза закончится начнется
только когда закончится предыдущая и будут созданы какие-то артефакты
Каждая фаза имеют строго определенные критерии входа и выхода
Каждая фаза строго документируется
Основа модели - ТЗ, которое не может измениться
Критерии качества - соответствие продукта установленным требованиям на каждом этапе
Наиболее важными критическими этапами являются "формирование требований" и 
"анализ и проектирование"
"формирование требований" - абстрактное описание функциональности будущего ПО 
независимо от технологий
"анализ и проектирование" - выбор технологии для описания абстрактной модели
Каждая стадия заканчивается выпуском набора документаций - каждую стадию может
разрабатывать независимая команда разработчиков
Легкость в применении
Легкость в осуществлении контроля
Недостатки:
о Заказчик увидит готовый продукт только в самом конце
о Риск срыва проекта из-за пропущенных ошибок
о (Если ошибка) Сбой и рост затрат при возврате на фазы назад
Применим 
а) Существуют четкие и не меняющиеся требования заказчика
б) Строятся относительно простые информационные системы
в) Повторно разрабатывается типовой продукт
г) Выпуск новой версии существующего продукта
Общая стратегия:
a) Определены все требования
b) Один цикл конструирования
c) Промежуточных версий не существует
Замечания:
Существуют модификации каскадных моделей в связи с тем что реализовать её в
классическом виде затруднительно
Варианты:
>Каскадно-возвратная модель
# Возврат в предыдущии стадии
# Возврат на любую предыдущую стадию

# V - образная модель
Разработана в конце 80-х годов, является стандартом для немецких
правительственных и оборонных проектов
Основной смысл: на базовых этапах проектирования планируется тестирование
Структура модели по стандарту STB-ISO/MAP122072003
Этапы:
1) Подготовка процесса разработки
2) Анализ требований к системе + План ввода в эксплуатацию
3) Проектирование архитектуры системы + план квалификационных испытаний
4) Проектирование программных средств + план испытаний модулей
5) Программирование и тестирование
6) Сборка и квалификационные испытания модулей
7) Сборка система и её квалификационные испытания
8) Приёмочные испытания
Преимущества:
о Планирование на ранних стадиях систем тестирования
о Обеспечение аттестации и верификации на всех этапах
о Простота в использовании
Недостатки:
% Трудности с проектированием параллельных событий
% Не предусмотрено динамическое изменение требований заказчика
Стратегия
1) Определены все требования
2) Проектирование параллельных событий
3) Один цикл конструирования

Следующая стандартная модель - инкрементная
Описана в 80-ые годы.
Подразумевает разработку ПО с линейной последовательностью стадий но в
несколько инкрементов (версий). 
Каждый инкремент подразумевает запланированное улучшение продуктов.
Каждая версия наращивает функциональность
Основная идея:
# В начале работы определяются все основные требования к системе
# Описывается приоритет требований и функциональности
# Согласно приоритетам реализуются промежуточные версии
# Каждая версия является полностью законченным и работоспособным продуктом
Последняя версия включает в себя весь заранее запланированный функционал

Причины использования: 1) Отсутствие у заказчика возможности профинансировать 
сразу весь проект
2) Отсутствие у разработчика необходимых ресурсов для реализации проекта
в сжатые сроки
3) Избегание "отторжения" проекта пользователем-заказчику

Преимущества
а) Итеративное тестирование
б) Равномерная загрузка участников проекта
в) Заказчик раньше увидит результаты и может незначительно скорректировать требования 

Стратегия:
1) Определены все требования
2) Множество циклов конструирования
3) Промежуточные версии могут распространяться

Спиральная (эволюционная, итерационная) модель
Барри Богэм, 1988 год
Основная идея: разработка в виде последовательных версий, но в начале
проекта определены не все требования. Требования уточняются в результате
разработки версии и отзывов пользователей

Особенности: 
о Модель характерна при разработке новаторских и нетиповых систем
о В начале работы над проектом у заказчика и разработчика нет четкого видения
итогового продукта
о Принимаются решения по разработке с возможностью изменения требований
или отказа от дальнейшего развития проекта

Достоинства:
о Позволяет быстро показать пользователям работоспособный продукт
о Активизируется процесс уточнения и дополнения требований, в том числе
с широким участием пользователей
о Гибкость в управлении проектом
о Данная модель позволяет создать более надежную и устойчивую систему
о Уменьшаются риски заказчика
о Промежуточный продукт является полностью работоспособным

Недостатки:
@ Увеличивается неопределенность разработчика в перспективах развития проекта
@ Неизвестно точное количество итераций 
@ Затруднены операции временного и ресурсного планирования

Стратегия: 
1) Определены не все требования
2) Множество циклов конструирования
3) Промежуточные инверсии могут распространяться

Разновидность №2. 
Гибкие методологии - серия подходов к разработке ПО, ориентированное на
использование итеративной разработки, с динамическим формирований требований
и обеспечение их реализации в результате постоянного взаимодействия
внутри самоорганизующихся рабочих групп, состоящих из специалистов различного профиля

Основные идеи:
1) Люди и взаимодействия важнее процессов и инструментов
2) Работающий продукт важнее исчерпывающей документации
3) Сотрудничество с заказчиком важнее согласования условий контракта
4) Готовность к изменению важнее следованию первоначальному плану
5) Непосредственное общение лицом к лицу

2010 год - манифест гибкой методологии
Основные тезисы:
1) Удовлетворение клиента за счет [ранней и бесперебойной] доставки ценного
программного продукта
2) Приветствие изменений требований даже в конце разработки
3) Тесное общение с заказчиком
4) Проектом занимаются мотивированные личности
5) Рекомендуемый метод передачи информации - личный разговор
6) Постоянная адаптация к изменяющимся обстоятельствам
7) Работающее ПО - лучший измеритель прогресса
8) Постоянное внимание к улучшению технического мастерства
9) Лучшие технические требования, дизайн и архитектура получаются у
самоорганизованной команды

Примеры: Scrum, экстремальное программирование, бережливое,
программирование чистой комнаты 