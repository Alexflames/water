Понятие о технологии программирования и основные этапы её развития.
    Технология - набор правил, методик и инструкций, позволяющих наладить
  производственный выпуск какого-либо продукта.
    Технология программирования - совокупность методов и средств, используемых
  в процессе разработки ПО.
    Программная инженерия - систематизированный подход к разработке,
  эксплуатации и выведению из обращения программных средств.

  Виды ТП.
      Технологии, используемые на конкретных этапах разработки или для решения
    отдельных задач этих этапов. В основе данного вида лежит конкретно
    применимый метод для решения конкретной частной задачи (изолированно от 
    всей системы в целом).
      Технология, охватывающая несколько этапов или весь процесс разработки.
    В основе базовый метод, определяющий совокупность подходов, применимых к 
    разработке.

  Задачи ТП.
    1) Технология программирования должна наладить производственный выпуск ПП (прогр. продук.)
    2) ТП должна сокращать стоимость ПП, при этом повышая его качество.

      Результат применения ТП - программа, действующая в заданной вычисл. среде,
    хорошо документированная и отлаженная, и доступная для понимания и развития 
    в процессе сопровождения.

      ТП в общем виде представляет собой набор след. инструкций:
    1) Указание последовательности выполнения техн. операций.
    2) Перечисление условий, при которых выполняется та или иная операция.
    3) Описание самой операции, где для каждой операции определяются исходные 
    данные и реультат
    4) Нормативы, стандарты критериев.
    5) Процессы планирования и оценки качеств 

      ТП в узком смысле - это способ создания программ, включает в себя знание
    ЯП и инструментальных средств.

  ТП в историческом контексте
    Этап №1 - Стихийное программирование - от появления, до середины 65-68х годов
      Особенность:
    1) Программа - это штучный товар
    2) Не существует регламентированных требований к программам
    3) Программирование - это искусство
    4) Преобладание интуитивной технологии в программировании (снизу вверх)
    Интуитивная технология заключается в том что программист сразу 
    приступает к составлении программы по заданию, при этом задание может
    несколько раз изменяться, и минимальная документация составляется
    постфактум. 
      Методика технологий снизу вверх: 
    1) задача разбивается на ряд подзадач
    2) программист пытается сначала решить подзадачу, и лишь потом
    их синхронизироваь вместе, выработав общий интерфейс
      Ступени первого этапа:
    1) появление первых программ на машинном языке. Сложность работы 
    программиста ограничивалась способностью отслеживать последовательность
    выполнения операций и места нахождения данных;
    2) появление ассемблеров, которое позволило вместо 
    двоичных/шестнадцатеричных кодов использовать символические имена данных
    и мнемонику кодов;
    3) появление языков высокого уровня позволила снизить детализацию операций.
    Это привело к усложнению программ;
    4) Значимым событием стало появление возможности использовать в ЯП подпрограммы.
    Что привело к появлению библиотек;
    5) для сокращения искажения данных было предложено использовать в ПодПрог.
    свои области для хранения локальных данных
      В конце 60-х годов разразился кризис программирования, повсеместно фирмы
    не успевают в срок завершить программный продукт. 
      Факторы кризиса:
    1) Программы были сложны, запутанны, разобраться мог только автор.
    2) Преобладаниеп простейших конструкций.
    3) Конструкция снизу вверх. Сначала делались подпрограммы -> в программу
    4) Интерфейсы программ получались сложными при сборке
    5) Исправление ошибок требовало большого количества времени
    6) Процесс тестирования и отладки занимал до 80% времени разработки программ.

    Этап №2 - Структурный подход к программированию
    (Вторая половина 60-х - 70-ые годы)
    Переход к технологии сверху вниз. Алгоритм:
    1) Задача разбивается на ряд подзадач
    2) Каждая из полученных подзадач анализируется с целью возможного 
    разбиения на подзадачи;
    3) Процесс заканчивается когда подзадачу невозможно / нецелесобразно
    разбивать дальше
    4) Программа конструируется иерархически от главной подпрограммы к
    подпрограммам нижнего уровня

      В основе структурного подхода лежит декомпозиция (разбиение на части)
    сложных систем с целью последующей реализации в виде отдельных небольших
    подпрограмм.
      Основы структурного программирования
    1) Сложный алгоритм выстраивается из соединения базовых структур
    соединяться структуры могут 2 способами: последовательно и путем вложения
    2) Развитие принципа модульности при разработке программы. Модуль - 
    смысловая часть, функционально законченный элемент программы. 
    Модуль должен иметь 1 вход и 1 выход. Каждый модуль программируется отдельно,
    а затем модули соединяются в единую сложную систему. Для модуля 
    разрабатывается заглушка модуля для проверки функционирования сложной системы
    В самом простейшем виде заглушка - модуль бездействия

      Этап №3 - объектный подход к программированию
      (середина 80-х - 90-ые года XX века)
      Основа данного этапа - ООП. 
      ООП - технология создания сложного ПО, основанная на представлении программ
    в виде совокупности объектов, каждый из которых является представителем 
    некоторого класса, а классы образуют иерархию с наследованием свойств.
    Взаимодействуют программные объекты друг с другом при помощи механизма 
    передачи сообщений.
      Достоинства:
      1) Более естественная декомпозиция
      2) Возможность ведения независимых разработок
      3) Предлагаются новые способы, основанные на механизмах:
        а) Абстрагирование - берем только нужные свойства
        б) Инкапсуляция - скрытие реализации
        в) Полиморфизм - разновидность стандартизации интерфейса 
        г) Наследование
      4) Возможности визуального проектирования интерфейса
      5) Расширения принципов работы с библиотеками

      Этап №4 - компонентный проход
      (конец 90-х - до нашего времени)
      Компонент - физически отдельно существующая часть ПО, которая 
    взаимодействует с необх. объектом через специализированный интерфейс
      Объекты компонента можно собирать в динамически вызываемой библиотеке и
    использовать в любом языке программирования, поддерживающим соотв. технологию.

      Особенности при разработке сложных программ (то, на что должна обращать
                внимание технология программирования)
      1) Сложность формального определения требований
      2) Отслеживание степени повторяемости кодов
      3) Анализ иерархии модуля
      4) Планирования разработки
      5) Определение отношения коллективной разработки (чем больше коллектив,
      тем сложнее организовать работу)
      6) Необходимость в нахождении взаимосвязей между специалистом предметной 
      области и разработчиком
      7) Создание универсальных библиотек, которые можно использовать в 
      дальнейшей разработке
      8) Компетентность разработчиков.
      9) Создание проектных спецификаций и выработка правил и методологий
      переноса информационных систем с одной платформы на другую

Понятие о трансляторе, компиляторе, интерпретаторе и среде разработки.
    Транслятор - программа или техническое средство, выполняющее трансляцию
  программы.
    Трансляция программы - преобразование программы, представленной на одном из
  ЯП, в программу на другом языке программирования
    Транслятор может выполнять дополнительные функции, например, диагностика ошибок
    Язык, на котором представлена входная программа - исходный язык, а сама
  программа - исходный код
    Выходной язык называется целевым языком, а выходная программа - 
  объектный код

    Виды трансляторов:
  1) Диалоговый транслятор - обеспечивает использование языка программирования 
  в режиме разделения времени. 
  2) Синтаксически-ориентированный - транслятор, на вход которого  подается  
  синтаксис и семантика языка, и транслирующий программу на другой язык
  3) Однопроходный - транслятор, создающий объектный модуль при однократном 
  последовательном чтении исходного кода
  4) Многопроходный
  5) Оптимизирующий - транслятор, выполняющий оптимизацию созданного кода перед
  записью в объектный файл.
  6) Обратный - транслирует из объектного модуля в код на языке программирования
  7) Текстовый - получает один исходный код, выдает измененный исходный код