Выделяют 2 основных вида трансляции:
а) Компиляция - это транслятор, преобразующий исходный код какого-либо ЯП
  на машинный код.

Алгоритм работы компилятора
1) Лексический анализ, разбор на лексемы(группы)
2) Синтаксический анализ - сопоставление с правилами грамматики
3) Семантический анализ - выявление отношения, связей
4) Создание на основе анализа промежуточного кода
5) Оптимизация промежуточного кода
6) Создание объектного кода

Часть транслятора - компоновщик(редактор связей). Его задача - добавить
статическую библиотеку или связывает с динамической

Распространяется исполняемый файл, который является некроссплатформенным.
Недостаток - медленный процесс компиляции
Превнесение изменений требует повторной компиляции

б) Интерпретация
Интерпретация - процесс чтения и выполнения кода (строчка за строчкой)
Распространяется исходный код

Интерпретация всегда является кроссплатформенной.

Недостатки: 
1) Выявление ошибок на стадии исполнении интерпретатором 
2) Скорость работы готовой программы

Смешанная реализация - сначала компилятор, потом интерпретатор
Для кроссплатформенных решений

Алгоритм работы:
1) Программа компилируется неполностью, до тех пор пока может представить
кроссплатформенный код (байткод)
2) Байткод - некий аналог исполняемого модуля, но выполнить его может не 
реальный процесс, а только виртуальная машина.
3) На машине исполнителя должна присутствовать виртуальная машина (интерпретатор),
позволяющий исполнить байткод.
Такие языки: Java, Python.

Система программирования - интегрированная среда разработки, которая включает
в себя (как правило): текстовый редактор, компилятор или интерпретатор,
отладчик, средства автоматизации сборки, инструменты для упрощенного 
конструирования интерфейса

Понятие о промышленном программировании

Для любительского программировании характерно:
  а) Создание программ для решения частных задач
  б) Небольшой тираж
  в) Программа является объектом творчества
  г) Данные программы не поддерживают полный цикл разработки ПО

Промышленные программы - продукция производственно-технического назначения
  а) Программа обладает непосредственной производительной силой
  б) Признаки промышленной продукции
  Промышленная продукция - результат труда, полученный в определенном месте и
  в определенное время и предназначенный для использования потребителем
  в целях удовлетворения его материальных или духовных потребностей

Промышленные программные продукты делятся на категории:
  1) Небольшие - сотни и тысячи операторов высокого уровня
  2) Средние - десятки и сотни тысяч операторов
  3) Большие - миллионы операторов
  4) Сверхбольшие - десятки миллионов и выше операторов высокого уровня

  В качестве примера, Windows XP - 45 миллионов

  Проблемы промышленных продуктов:
  а) Недостаток технической компетенции
  б) Плохое управление процессом разработки
  в) Зачастую разработчики дают необоснованные обещания заказчику
  г) Непонимание принципов разработки сложных систем

  Определение сложности:
  1) Структурное определение сложности - 
  простая система характеризуется тем, что человек уверенно может перебрать 
  все связи между её элементами (в сложной системе он это сделать не в состоянии)

  2) "Поведенческое" определение сложности - 
  сложная система всегда недетерменирована с точки зрения поведения

  Сложности разработки делятся на 2 группы (по Фредерику Бруксу):
  1) Сущности - те сложности, которые внутренне присущи сложности ПО
  2) Акциденции - не внутренние сущности, а сущности, сопутствующие производству,
  которые могут проявиться в определенных ситуациях.

  Принципы работы со сложными системами
  1) Абстракция и уточнение
  2) Модульность
  3) Избегание переиспользования - избегания повторения описания одних и тех же
  знаний.

  Любая сложная программа не может быть оценена по принципу правильности.
  Здесь стоит говорить о том, является ли она достаточно качественной или 
  недостаточно качественной.

  Качество программы определяет удовлетворение пользователя от работы с программой
  и удовлетворение разработчика.

Жизненный цикл ПО
  Разработка ПО - разновидность человеческой деятельности, основанной на принципах
  работы со сложными системами. 
  Основная идея работы жизненного цикла - 
    детализация: цели -> задачи -> подзадачи

  Жизненный цикл - все, что сопровождает ПО с момента идеи до момента удаления
  последней копии

  Основные элементы жизненного цикла
  1. Процессы       3. Роли
  2. Артефакты      4. Цели

  1. Совокупность взаимосвязанных действий, преобразующих некоторые входные
  данные в выходные

  Примеры процессов:
    Анализ предметной облатси
    Кодирование
    Сбор требований
    Сопровождение

  2. Создаваемые человеком информационные сущности, документы в достаточно
  общем смысле, участвующие в качестве входных данных и получающиеся в
  качестве результатов различных деятельностей

  Примеры артефактов:
    Программный код
    Документация
    Техническое задание (письменный и устный вид)

  3. Роль - абстрактная группа заинтересованных лиц, участвующих в деятельности
  по созданию и эксплуатации системы и решающих одни и те же задачи или имеющие
  одни и те же интересы по отношению к ней

  4. Цель - идея, являющаяся стержнем в рамках процесса, задачи или подзадачи.

  Существуют разработанные стандарты, регламентирующие процессы цикла ПО.
  Есть организация ISO - International Standards Organization. 
  В рамках организации существует комитет - системная программная инженерия.

  ЗАДАНИЕ НА доп. балл - просмотреть
  ГОСТ 34.601-90 российский аналог стандарта ISO/IEC 12207 

  Написать в тетради.

{
  Процессы жизненного цикла ISO/IEC 12207
  Определяет жизненный цикл ПО в виде трехступенчатой модели, состоящей из
  процессов, видов деятельности и задач.

  18 процессов в 4 общих группах:
  Приобретение ПО, Разработка ПО, Эксплуатация ПО, Поддержка ПО

  Процессы состоят из отдельных видов деятельности. 
  В совокупности 74 вида деятельности.

  Например у приобритения ПО:
    инициация приобритения, подготовка контракта, анализ поставщиков и т.д.

  Каждый вид деятельности нацелен на решение ряда подзадач.
  Всего определено 224 подзадачи.

  Например у "переноса ПО между платформами":
    разработка плана переноса, оповещение пользователей, выполнение анализа
    производимых действий
}

ISO/IEC 15288 Standards for Systems Engineering - System Life Cycle Processes
  Отличается от предыдущего нацеленностью на рассмотрение 
  программно-аппаратных систем в целом.

