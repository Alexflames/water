Анализ сложности алг.

Имеем дело с абстрактной машиной с бесконечной памятью и временем. 
Оценка времени. Скорость роста сложности функции в зависимости от длины входа.


Наша задача - нахождение функции T(n) 

Конкретная проблема задается N словами по a битов каждое. Na = N * a

Программа, реализующая алг. состоит из M машинных инструкции по b битов
Mb = M * b

Трудоемкость алгоритма - кол-во элем. операций

Функция трудоемкости - Ta(N)

Комплексная оценка алгоритма. ci - вес ресурсов
PsiA = c1 * Ta(N) + c2 * M + c3 * Sd + c4 * Sr

Зависимость трудоемкости от входных данных. Классификация
1. Худший случай - наиб. кол-во операций
2. Лучший случай - наим.
3. Средний случай
Средний - сумма произведений вероятностей того, что данные принадлежат группы на
трудоемкость

1. Количественно зависимые (только от числа)
2. Параметрически зависимые (только от значений)
3. Параметрически-количественно ()
3.1 Порядково-зависимые (от порядка в том числе) - устойчивые сортировки входят в этот подкласс

Основные оценки сложности
(Самая точная - 1. t(n))
1. Если есть ф-ия t(n) и g(n), что любое значение t(n) будет находиться в 
интервале c1 * g(n), c2 * g(n) c1 и c2 - константы, то они одинаково растут 

2. Оценка сверху (Самая ценная)


3. Оценка снизу

Св-ва оценок - транзитивность, рефлексивность, симметричность

Классы сложность: 
1. logN 
2. N
3. N*logN
4. N^2
5. N^3

Экспоненциальные алгоритмы
1. 2^n
2. n!

Класс 0 - O(1), O(log N)
....(не записал)