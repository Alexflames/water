Доклады и презентации: упор на практическую часть, как работает алгоритм на примере

Алгоритмически неразрешимые задачи
Если имеется класс неразрешимых, не значит, что определенная задача неразрешима (WUT)
Абстрактные машины нужны для определения разрешимости

Примеры алгоритмически неразрешимых задач
h(n) для любого нат. N выдавала бы 1, если в десятичной записи числа pi есть n стоящих
подряд 9, и = 0, если такой цепочки девяток нет

Проблема Эйлера - любое четное число можно представить в виде суммы двух простых чисел

Теорема Гёделя о неполноте формальной арифметики. Существуют утверждения, которые не могут
быть ни доказаны, ни опровергнуты на основе любого набора непротиворечивых аксиом

Методы доказательства алгоритмической неразрешимости
> Прямой метод, диагональный метод Кантора. С помощью построения приходим к противоречию

> Косвенный метод. Имеется несколько неразрешимых задач, и приходим к заключению, что если
бы наша была разрешима, то и те были бы разрешимы, т.е. противоречие

==========================
Диагональный метод Кантора
==========================
Теорема Кантора о несчетности множества... (не записал)
Нельзя занумеровать все действительные числа (от противного)
Док-во (не записал)

Теорема: множество арифметических ф-ий n-переменных несчетно
Док-во: 
Чтобы доказать несчетность мн-ва нужно доказать несчетность его подмножества
Докажем, что мн-во ф-ий 1 переменной несчетно
Рассмотрим функции Fi(x). Занумеруем последовательность таких функций
F0(x), F1(x), F2(x),...

Построим новую функцию G(x) Fx(x) + 1
G(0) = F0(0) + 1, G(1) = F1(1) + 1, G(2) F2(2) + 1, ....
Она отличается от каждой функции.

Получили противоречие. Множество несчетно
Любой невычислимый алгоритм можно представить как вычисление арифметической функции n-переменных.
Значит мн-во таких алгоритмов несчетно.  

Любый вычислимый алг. представляется как МТ. Мн-во вычислимых алг. счётно
Каждая машина Тьюринга определяется мн-вом конечных слов в конечном алфавите

АФ(несчетно) > НАФ(несчетно) > ВАФ(счетное)
АФ - арифм. ф-ии 
НАФ - невычислим. ВАФ - вычислим.

Проблема остановки - не существует алг (МТ), позволяющего по описанию произвольного 
алгоритма (его номеру) и исх. данных определить, останавливается ли этот алгоритм на этих
данных или будет работать бесконечно

Самоприменимость: завершается ли на...(не дописал)

Т-ма. Не существует МТ, решающая проблему самоприменимости. 
Д-во: по МТ Т0 строим Т1, вместо q0 введем закл. состояние qr и добавим новые команды
q01 -> q01E (зацикливание)
q00 -> qr0E (*) - самоприменимость

Если бы Т1 была самоприменима, тогда она остановилась, но по построению она зацикливается. 
Если б Т1 была не самоприменима, мы перешли бы в q00, и машина остановилась бы на алгоритме,
представляющую её саму. Это означает, что она самоприменима. Противоречие

Итог: решить задачу самоприменимости невозможно

Проблема останова и доказательство её неразрешимости.
Док-во с помощью диагональн. метода и свойства самоприменимости алгоритма. 

Док-во:
Рассматриваем мн-во всех алг., получающих на вход нат. число. Вход - № алгоритма и 
данные - мн-во нат.чисел
Наш алг - отображение N -> N*, N* - натуральные числа + зацикливание

От противного. Пусть ф-ия F(a, x) существует и вычислима 
F - результат выполнения a на x.
Рассмотрим F с точки зрения самоприменимости, т.е. рассмотрим F(x, x), т.е.
На вход алгоритма с номером x будет формальная запись алг. x

Построим h(x) = F(x, x) + 1
h(x) вычислима, сложение не меняет свойство вычислимости. В т. x = a F(a, a) = h(a), 
но h(a) = F(a, a) + 1
ПРОТИВОРЕЧИЕ

Неразрешимость проблемы останова можно интерпретировать как несуществование общего алгоритма для отладки программ...