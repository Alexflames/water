Макросредства - наиболее надежный из программирования. Они позволяют 
модифицировать, генерировать исходный код программы.

Макросредства - блоки повторений, макросы, директивы условной генерации.
Программы на asm содержащие макросредства компилируются в 2 этапа. 

Первый этап, макрогенерация, является чистым текстом программы, предпроцессорная
обработка
На втором этапе перевод в машинный код.

Блоки повторений, процессы макрогенерации замещаются последовательностью команд
указанных в блоке столько раз, сколько определено в заголовке блока повторений.
Причем эта последовательность команд повторяется в неизменном виде или в 
модифицированном (зависит от заголовка блока повторений)

Макросы больше похожи на код программы. Также как и для подпрограмм, существует
макроопределение (описание макроса) и обращение к макросу, называемая макрокомандой.
Результат обращения к макросу - макрорасширение, которое записывается на место 
макрокоманды, а этот процесс замены макрокоманды на макрорасширение называется 
макроподстановкой.

Отличия макросов от подпрограмм. При обращении к подпрограмме управление передается
на участок памяти, где содержится описание подпрограммы и после выполнения
возврат. А при обращении к макросу на место макрокоманды записывается
макрорасширение. Сколько раз содержится в программе, столько макрорасширений
появится в тексте программы. Таким образом увеличивается размер программы.

Использование макросов увеличивает требуемую память, а подпрограммы увеличивают 
время выполнения всей программы за счет обращения, возврата, передачи параметров
(call, ret и т.п.)
1) Если маленький кусок текста повторяется многократно, то макрос, иначе подпрограмма
2) Подпрограмма - неизменная последовательность команд, а макрорасширение может
быть различным если используется директива условной генерации.

Макрогенерация может быть до первой макрокоманды. Могут находиться в теле программы,
а могут храниться на отдельном файле на ди(с)ке, и могут подключаться с помощью
директивы INCLUDE <имя файла>

Блоки повторений.
Общий вид:
  <заголовок>
    <тело>
  endm

Тело - любая послед команд и директив asm, в т.ч. и блоки повторений
Заканчивается endm

REPT n ; где n - константное выражения (может быть вычислено на этапе компиляции)
На месте блока записывается n копий <тел> блока.
  N EQU 8
  REPT N-6
    DB 0,1
    DW ?
  endm

После макрогенерации:
  N EQU 8
  DB 0,1
  DW ?
  DB 0, 1
  DW ?

Для создания массива с нач. знач от 0 до 0FFH можно (но лучше не стоит)
  n = 1
  mas DB 0
  REPT 255
    DB n
    n = n + 1
  endm

2) Второй вид заголовка
  IRP P, <V1, V2, ... Vk> ; < > здесь обязательные символы
    <тело>
  endm 

  P - формальный параметр. V1, V2, ..., Vk - фактические параметры. В результате
  макрогенерации на месте блока повторений появится k экземпляров тела блока.
  И в i-ом экземпляре формальный параметр P замещен фактическим Vi-ым.
  Причем формальный параметр - локальное имя, никак не связанное с объектами языка.
  При совпадении локального параметра со стандартным именем, они - разные величины.

  1)                                После макрогенерации
  IRP reg, <AX, BX, SI>             push AX
    push reg                        push BX
  endm                              push SI

  2)
  IRP BX, <5, 7, 9>                 add AX, 5
    add AX, BX                      add AX, 7
  endm                              add AX, 9

  После макрогенерации необходимо, чтобы результат представлял правильную команду
  IRP R, <dec word ptr, L: inc word ptr>  
    R W                             dec word ptr W
    jmp M                           jmp M
  endm                            L:inc word ptr W
                                    jmp M

  3) IRPC P, S1S2...SK
  IRPC P, S1S2...SK
    <тело>
  endm

  P - формальный параметр, Si - символы, любые, кроме пробелов и точки с запятой
  Если эти символы нужны, то можно последовательность записать в угловых скобках

  K повторений блока, i-ый блок будет замещен символом Si 

  Например, 
    IRPC A, 175P                    add AX, 1
      add AX, A                     add AX, 7
    endm                            add AX, 5
                                    add AX, P

  Макрооператоры используются в макросредствах для работы с параметрами
  1) & - амперсанд. Используется чтобы определить границы формального параметра,
  выделить из окружающего текста и при макрогенерации текст не переносится.
    а) IRP W, <1,5,7>     var1 DW ?
         VAR&W DW ?       var5 DW ?
       endm               var7 DW ?

    б) IRPC A, "<         DB 'A, ", "B'
         DB 'A, &A, &A&B' DB 'A, <, <B'
       endm

  Могут быть вложенные блоки. За 1 проход макрогенератора удаляется только 1 &

  IRPC P1, AB          IRPC P2, HL      inc AH
    IRPC P2, HL          inc A&P2       inc AL
      inc P1&&P2       endm             inc BH
    endm               IRPC P2, HL      inc BL
  endm                   inc B&P2
                       endm

2) <> - заключенный в скобки текст рассматривается как текст.строка, в которую
могут входить пробел, запятые и другие разделители.
Этот макрооператор часто используется для передачи текстовых строк

  а) IRP V, <<1,2>, 3>      DB 1,2
       DB V                 DB 3
     endm

  б) IRPC S, <A; B>       DB 'A'
       DB 'S'             DB ';'
     endm                 DB 'B'

  Если бы скобок не было, то после ; был бы комментарий

3) Восклицательный знак ! - аналогичен угловым скобкам но для одного следующего
  за ним символа. Будет восприниматься как параметр или часть параметра

4) % - указывает, что следующий за ним текст является выражением, значение 
должно быть вычислено и использовано как параметр.
Например, пусть
  K EQU 4
  .......
  IRP A, <k+1, %k+1, W%k+1>     DW k+1
    DW A                          DW 5
  endm                            DW W5

5) ;; - макрокомментарии, в текст программы не переносится при макрогенерации.

  ====Макросы======

  <имя макроса> Macro <формальные параметры>
                LOCAL <список имен> ; может отсутствовать
                <тело>
  endm

  Первая строка - заголовок макроса, используется для обращения к макросу. 
  Формальные параметры через запятую, произвольное количество, но 
  должны поместиться в одной строке
  Также как и для блоков это локальные имена, не связанные с объектами программы.
  Если в теле макроса используются метки, то появится ошибка "дублирование меток".
  Чтобы это не произошло, используемые в макросе метки нужно описать через 
  запятую в директиве local.

  Тело макроса - последовательность строк, содержащих формальные параметры.
  После замещения которых фактическими параметрами должны получиться правильные
  конструкции языка ассемблера - команды или директивы.

  Макрокоманды имеют вид 
  <имя макрроса> <фактические параметры>

  Они указываются через запятую и/или пробел, и в качестве фактического параметра 
  может использоваться любой текст, в том числе и пустой, но он должен быть 
  сбалансирован по кавычкам и угловым скобкам так чтобы разделители 
  (пробел, запятая, ;) могли использоваться в качестве параметров

  При работе с макросами с помощью директивы EXITM можно совершить досрочный
  выход из макроса, если в макросе используется директива условной генерации
    IF x ... endif

  С помощью PURGE <имя макроса> можно отменить определенный ранее макрос.
  Это используют если макросов много, и они подключаются с диска.

  Рассмотрим примеры макросов. (!!ЭКЗАМЕН!!) 
1)IF_L MACRO x,y,L
    mov AX, x
    cmp AX, y
    jl L
  endm

Применение:
    ; DX = min(A, B, C)
    mov DX, A
    IF_L A, B, M1
    mov DX, B
M1: IF_L DX, C, M2
    mov DX, C
M2: -------------------

После макрогенерации в программе следующий текст:
    mov DX, A
    mov AX, A
    cmp AX, B
    jl M1
    mov DX, B
M1: mov AX, DX
    cmp AX, c
    jl M2
    mov DX, C
M2: ----------

2) Обращение к процедурам будет нагляднее если передачу параметров оформить
   как макрос. Например, вычислить CX = NOD(A, B) + NOD(C, D). Если процедура
   вычисления NOD(x,y), и результат ее будет находить в AX

  CALL_NOD MACRO x, y
    mov AX, x
    mov BX, y
    call NOD   ; (AX) = NOD(x, y)
  endm

  CALL_NOD A, B  ; наглядное обращение к ПП с параметрами
  mov CX, AX
  CALL_NOD C, D 
  add CX, AX     ; удобно


  Если имеется метка и директива local:

  Пример: вычислить остаток от деления одного числа на другое с помощью
  вычитания (числа натуральные, r1 и r2 - регистры, r1 = r1 mod r2)
  MD Macro r1, r2
    Local M, M2
M2: cmp r1, r2
    jb M1
    sub r1, r2
    jmp M
M1: 
  endm

  В результате макрогенерации
??0000: cmp AX, BX
        jb ??0001
        sub AX, BX
        jmp ??0000
??0001:

Метки указанные в директиве Local в результате макрогенерации заменяются имена вида
??xxxx