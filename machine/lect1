Лекция 1. Машинно-зависимые ЯП. 
(Картинка 1)
Системная шина(магистраль) включает в себя адресную шину, шину данных, шину управления.
Шина - набор линий связи, по которым информация передается от одного из источников к одному/нескольким приемникам.
Шина данных двунаправленная, данные передаются и от процессора и к процессору. Шина управления содержит и однонаправленные и двунаправленные линии связи.

Известно, что внешние устройства работают значительно медленнее, чем процессор, поэтому для организации параллельной работы процессора и внешних устройств в архитектуру компьютера включаются канал прямого доступа к памяти и устройство управления внешними устройствами, представленные интерфейсными блоками, а для синхронизации работы всех устройств используется система прерываний. Если какому-либо устройству требуется работа процессора, это устройство посылает процессору специальный сигнал и в зависимости от состояния процессора, прерывает выполнения текущей программы, обрабатывает сигнал (с ним связано какое-то действие) и после успешной обработки возвращается к прерванной программе.

Существуют различные типы прерываний (внешние, внутренние), маскируемые(можно ли заблокировать на некоторое время) или немаскируемые и различный приоритет. И для организации обработки прерываний в структуру или архитектуру компьютера включается контроллер прерываний. Если внешних устройств больше 8, то контроллеров больше 1, такой контроллер называется каскадным.
Это то, что доступно программистам.

Архитектура микропроцессора ix86. Процессоры семейства Intel совместимы снизу вверх. Программа, написанная на младшем поколении выполнится на старшем. При включении питания процессор устанавливается в реальный режим работы процессора и адресации памяти, но современные ОС сразу переводят его в защищенный режим, обеспечивающим многозадачность, обеспечивающий распределение ресурсов. Такие ОС допускают ещё режим виртуальных машин. С точки зрения программиста архитектура процессора - совокупность программно-доступных средств.

Начиная с Intel386 программисту доступны 16 основных регистров, 11 регистров для работы с сопроцессором и мультимедийными приложениями, и в реальном режиме доступны ещё некоторые режимы управления и некоторые специальные регистры.

16 регистров: 4 регистра общего назначения, при работе с 32-разрядными данными используются регистры с именами EAX, EBX, ECX, EDX, при работе с 16-разрядными данными используются регистры с именами AX, BX, CX, DX, и при работе с байтами используются 8 байтовых регистров с именами AL, AH, BL, BH, CL, CH, DL, DH. Эти регистры имеют собственные имена, отражающие собственные значения.
AX называют аккумулятором - в него чаще всего записывается результат
BX -> база - используется для сложной адресации операндов (данных в операциях)
CX -> счетчик - используется при организации циклов при работе со строками
DX -> данных

4 регистра индексов и указателей
SI, DI -> источник/приемника - сложная адресация операндов
SP, BP -> для работы со стеком

Процессор может работать с оперативной памятью как с одним непрерывным массивом байтов, а может работать с памятью разбитой на участки, называемые сегментами - это сегментируемая память, и для организации работы с сегментированной памятью в процессоре предусмотрено 
6 сегментных регистров (селекторы). С каждым из регистров связан программно недоступный регистр, называемый дескриптором, в котором хранится информация о сегменте, размер сегмента и некоторая специальная информация (адрес сегмента, размер сегмента) - это справедливо для защищенного режима работы. 
В реальном режиме процессор может работать с 1 Мб памяти, адрес сегмента кратен 16. И в 16-ой СС этот адрес может быть записан:
XXXX0
Старшие 4 цифры адреса хранятся в соответствующем сегментном регистре. При этом прога хранится в кодовом сегменте, и адрес содержится в CS (code segment), адрес стека в SS (stack segment).
4 регистра где могут храниться данные: DS, ES, FS, GS. Кодовый сегмент 1, но это не значит, что программа может занимать только 1 сегмент оперативной памяти. В любой момент программист может изменить содержимое сегментного регистра, и таким образом попасть в другой оперативной памяти. В реальном режиме работы размер сегмента фиксирован и равен 64 Кб. В защищенном режиме размер сегмента может достигать 4 Гб.

Что такое сегмент стека? Сегмент организован специальным образом - адрес начала сегмента операционная система автоматически записывает в регистр SS, а указатель на вершину стека содержится в регистре SP (stack pointer), и при добавлении элемента в стек содержимое указателя SP уменьшается. Это значит, что стек растет от максимально возможного значения в SS вниз. Такая организация стека необходима в режиме работы flat, когда вся оперативная память - 1 массив, когда стек в старших адресах и растет вниз головой, а программа в младших (рисунок 2)

Стек используется для временного хранения данных, передачи параметров в подпрограмму, для организации работы с подпрограммами в т.ч. рекурсивных. Для того чтобы стек можно было использовать и для фактических параметров и для локальных после передачи параметров фактических в подпрограмму содержимое регистра SP (stack pointer, вершина) можно сохранить в регистре BP (base (база) pointer), и потом загружать локальные параметры и обращаться уже к ним и к фактическим и локальным используя регистр BP. 
Например: BP + k и с параметром BP - n (к локальным) и наоборот, где k и n определяют номер и размер параметра.

Регистр счётчик/указатель команд, IP или EIP используется для получения адреса следующей исполняемой команды. Текущая команда - начало сегмента + смещение

Регистр флагов. FLAGS или EFLAGS - 32-разрядный регистр, в котором 1, 3, 5, 15, 19-31 пока не используются. Регистр флагов определяет состояние программы и процессора в каждый текущий момент времени. 
Флаг..
CF - переноса       TF - трассировки
PF - четности       IF - прерывания
AF - полупереноса   DF - направления
ZF - нуля           OF - переполнения
SF - знака (sign)
Они используются и в реальном и защищенном, а следующие только в защищенном:
AC - флажок выравнивания операндов
VM - флаг виртуальных машин
RF - флаг маскирования прерывания
NF - флаг вложенной задачи
IOPL - уровень привилегий ввода/вывода

CF устанавливается 1 <=> в результате выполнения некоторой текущей команды (например при сложении) произошел перенос за разрядную сетку, а при вычитании требуется заём. 
PF устанавливается 1 <=> в младшем байте результата окажется четное количество единиц
AF устанавливается 1 <=> например при сложении происходит перенос из 3 в 4, а при вычитании требуется заём из 4 в 3
ZF устанавливается 1 <=> результат выполнения команды равен 0
SF всегда равен старшему разряду результата
TF установленный(!) в 1 <=> переведет процессор в режим пошаговой отладки программы
IF с помощью него можно маскировать на некоторое время прерывание
DF используется при работе со строками. Установленный в 1 определяет обработку строки слева направо. 0 <=> справа налево
OF устанавливается 1 <=> результат операции превышает максимально допустимое значение для данной разрядной сетки. Например если при сложении произошёл перенос из старшего цифрового разряда в знаковый, а из знакового переноса нет и наоборот. 


Лекция2
Байты могут объединяться в поля - поля переменной и фиксированной длины
Фиксированной - имеют собственные имена, слово состоит из 2 байтов, двойное слово из 4 байтов
Длина поля - кол-во входящих в него байтов, адрес поля - адрес младшего входящего в поле байта
Адрес поля может быть любым, но если флажок АС установлен 1, то адрес слова должен быть кратен 2, а двойного слова - 4.

Оперативная память может использоваться как непрерывный массив байтов или как сегментированная память.